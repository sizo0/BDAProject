/* Generated By:JJTree&JavaCC: Do not edit this line. XPathTokenManager.java */
package org.w3c.xqparser;
import org.jooq.Record;
import org.jooq.SelectSelectStep;
import org.w3c.xqparser.Node;
import org.w3c.xqparser.SimpleNode;
import java.io.*;
import java.util.ArrayList;
import java.util.List;
import java.util.Stack;
import java.util.Vector;
import org.w3c.dom.Element;
import org.w3c.dom.Document;
import javax.xml.parsers.*;
import org.w3c.dom.traversal.DocumentTraversal;
import org.w3c.dom.traversal.NodeFilter;
import org.w3c.dom.traversal.NodeIterator;
import org.w3c.dom.traversal.TreeWalker;
import static org.jooq.impl.DSL.*;
import sql.DB;

/** Token Manager. */
public class XPathTokenManager implements XPathConstants
{
  public Stack stateStack = new Stack();
  // private Vector persistentLexStates  = new Vector();
  static final int PARENMARKER = 2000;
  public int offset = 0;


  void CommonTokenAction(Token t) {}


  /**
   * Push the current state onto the state stack.
   */
  private void pushState()
  {

    stateStack.addElement(new Integer(curLexState));
  }

  /**
   * Push the given state onto the state stack.
   * @param state Must be a valid state.
   */
  private void pushState(int state)
  {

    stateStack.push(new Integer(state));
  }

  /**
   * Pop the state on the state stack, and switch to that state.
   */
  private void popState()
  {
    if (stateStack.size() == 0)
    {
      printLinePos();
    }

    int nextState = ((Integer) stateStack.pop()).intValue();

    if(nextState == PARENMARKER)
      printLinePos();
    SwitchTo(nextState);
  }

  /**
   * Push the given state onto the state stack.
   * @param state Must be a valid state.
   */
  private boolean isState(int state)
  {
        for (int i = 0; i < stateStack.size(); i++) {
        if(((Integer) stateStack.elementAt(i)).intValue() == state)
        {
                return true;
        }
        }
        return false;
  }

  /**
   * Push a parenthesis state.  This pushes, in addition to the 
   * lexical state value, a special marker that lets 
   * resetParenStateOrSwitch(int state)
   * know if it should pop and switch.  Used for the comma operator.
   */
  private void pushParenState(int commaState, int rparState)
  {
    stateStack.push(new Integer(rparState));
    stateStack.push(new Integer(commaState));
    stateStack.push(new Integer(PARENMARKER));
    SwitchTo(commaState);
  }


  /**
   * Print the current line position.
   */
  public void printLinePos()
  {
    System.err.println("Line: " + input_stream.getEndLine());
  }

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_29(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_29(int pos, long active0, long active1, long active2)
{
   return jjMoveNfa_29(jjStopStringLiteralDfa_29(pos, active0, active1, active2), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_29()
{
   switch(curChar)
   {
      case 63:
         return jjMoveStringLiteralDfa1_29(0x8000000000L);
      default :
         return jjMoveNfa_29(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_29(long active2)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_29(0, 0L, 0L, active2);
      return 1;
   }
   switch(curChar)
   {
      case 62:
         if ((active2 & 0x8000000000L) != 0L)
            return jjStopAtPos(1, 167);
         break;
      default :
         break;
   }
   return jjStartNfa_29(0, 0L, 0L, active2);
}
static final long[] jjbitVec0 = {
   0x0L, 0xffffffffffffc000L, 0xfffff0007fffffffL, 0x7fffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0x0L, 0xff7fffffff7fffffL
};
static final long[] jjbitVec3 = {
   0x7ff3ffffffffffffL, 0x7ffffffffffffdfeL, 0xffffffffffffffffL, 0xfc31ffffffffe00fL
};
static final long[] jjbitVec4 = {
   0xffffffL, 0xffffffffffff0000L, 0xf80001ffffffffffL, 0x3L
};
static final long[] jjbitVec5 = {
   0x0L, 0x0L, 0xfffffffbffffd740L, 0xffffd547f7fffL
};
static final long[] jjbitVec6 = {
   0xffffffffffffdffeL, 0xffffffffdffeffffL, 0xffffffffffff0003L, 0x33fcfffffff199fL
};
static final long[] jjbitVec7 = {
   0xfffe000000000000L, 0xfffffffe027fffffL, 0x7fL, 0x707ffffff0000L
};
static final long[] jjbitVec8 = {
   0x7fffffe00000000L, 0xfffe0000000007feL, 0x7cffffffffffffffL, 0x60002f7fffL
};
static final long[] jjbitVec9 = {
   0x23ffffffffffffe0L, 0x3ff000000L, 0x3c5fdfffff99fe0L, 0x30003b0000000L
};
static final long[] jjbitVec10 = {
   0x36dfdfffff987e0L, 0x1c00005e000000L, 0x23edfdfffffbafe0L, 0x100000000L
};
static final long[] jjbitVec11 = {
   0x23cdfdfffff99fe0L, 0x3b0000000L, 0x3bfc718d63dc7e0L, 0x0L
};
static final long[] jjbitVec12 = {
   0x3effdfffffddfe0L, 0x300000000L, 0x3effdfffffddfe0L, 0x340000000L
};
static final long[] jjbitVec13 = {
   0x3fffdfffffddfe0L, 0x300000000L, 0x0L, 0x0L
};
static final long[] jjbitVec14 = {
   0xd7ffffffffffeL, 0x3fL, 0x200d6caefef02596L, 0x1fL
};
static final long[] jjbitVec15 = {
   0x0L, 0x3fffffffeffL, 0x0L, 0x0L
};
static final long[] jjbitVec16 = {
   0x0L, 0x0L, 0xffffffff00000000L, 0x7fffffffff003fL
};
static final long[] jjbitVec17 = {
   0x500000000007daedL, 0x2c62ab82315001L, 0xf580c90040000000L, 0x201080000000007L
};
static final long[] jjbitVec18 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffff0fffffffL, 0x3ffffffffffffffL
};
static final long[] jjbitVec19 = {
   0xffffffff3f3fffffL, 0x3fffffffaaff3f3fL, 0x5fdfffffffffffffL, 0x1fdc1fff0fcf1fdcL
};
static final long[] jjbitVec20 = {
   0x4c4000000000L, 0x0L, 0x7L, 0x0L
};
static final long[] jjbitVec21 = {
   0x3fe00000080L, 0xfffffffffffffffeL, 0xfffffffe001fffffL, 0x7ffffffffffffffL
};
static final long[] jjbitVec22 = {
   0x1fffffffffe0L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec23 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0x3fffffffffL, 0x0L
};
static final long[] jjbitVec24 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xfffffffffL, 0x0L
};
static final long[] jjbitVec25 = {
   0x0L, 0x0L, 0x80000000000000L, 0xff7fffffff7fffffL
};
static final long[] jjbitVec26 = {
   0xffffffL, 0xffffffffffff0000L, 0xf80001ffffffffffL, 0x30003L
};
static final long[] jjbitVec27 = {
   0xffffffffffffffffL, 0x30000003fL, 0xfffffffbffffd7c0L, 0xffffd547f7fffL
};
static final long[] jjbitVec28 = {
   0xffffffffffffdffeL, 0xffffffffdffeffffL, 0xffffffffffff007bL, 0x33fcfffffff199fL
};
static final long[] jjbitVec29 = {
   0xfffe000000000000L, 0xfffffffe027fffffL, 0xbbfffffbfffe007fL, 0x707ffffff0016L
};
static final long[] jjbitVec30 = {
   0x7fffffe00000000L, 0xffff03ff0007ffffL, 0x7cffffffffffffffL, 0x3ff3dffffef7fffL
};
static final long[] jjbitVec31 = {
   0xf3ffffffffffffeeL, 0xffcfff1e3fffL, 0xd3c5fdfffff99feeL, 0x3ffcfb080399fL
};
static final long[] jjbitVec32 = {
   0xd36dfdfffff987e4L, 0x1fffc05e003987L, 0xf3edfdfffffbafeeL, 0xffc100003bbfL
};
static final long[] jjbitVec33 = {
   0xf3cdfdfffff99feeL, 0xffc3b0c0398fL, 0xc3bfc718d63dc7ecL, 0xff8000803dc7L
};
static final long[] jjbitVec34 = {
   0xc3effdfffffddfeeL, 0xffc300603ddfL, 0xc3effdfffffddfecL, 0xffc340603ddfL
};
static final long[] jjbitVec35 = {
   0xc3fffdfffffddfecL, 0xffc300803dcfL, 0x0L, 0x0L
};
static final long[] jjbitVec36 = {
   0x7ff7ffffffffffeL, 0x3ff7fffL, 0x3bff6caefef02596L, 0x3ff3f5fL
};
static final long[] jjbitVec37 = {
   0xc2a003ff03000000L, 0xfffe03fffffffeffL, 0x2fe3ffffebf0fdfL, 0x0L
};
static final long[] jjbitVec38 = {
   0x0L, 0x0L, 0x0L, 0x21fff0000L
};
static final long[] jjbitVec39 = {
   0x3efffe000000a0L, 0xfffffffffffffffeL, 0xfffffffe661fffffL, 0x77ffffffffffffffL
};
private int jjMoveNfa_29(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 16;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 2:
                  if ((0x100002600L & l) == 0L)
                     break;
                  kind = 194;
                  jjCheckNAdd(2);
                  break;
               case 1:
                  if ((0x3ff600000000000L & l) == 0L)
                     break;
                  kind = 183;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 183)
                        kind = 183;
                     jjCheckNAdd(1);
                  }
                  if (curChar == 88)
                     jjAddStates(0, 3);
                  else if (curChar == 120)
                     jjAddStates(4, 8);
                  break;
               case 1:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 183)
                     kind = 183;
                  jjCheckNAdd(1);
                  break;
               case 3:
                  if (curChar == 120)
                     jjAddStates(4, 8);
                  break;
               case 4:
                  if (curChar == 108 && kind > 182)
                     kind = 182;
                  break;
               case 5:
               case 12:
                  if (curChar == 109)
                     jjCheckNAdd(4);
                  break;
               case 6:
               case 10:
               case 13:
                  if (curChar == 77)
                     jjCheckNAdd(4);
                  break;
               case 7:
                  if (curChar == 76 && kind > 182)
                     kind = 182;
                  break;
               case 8:
               case 15:
                  if (curChar == 109)
                     jjCheckNAdd(7);
                  break;
               case 9:
               case 14:
                  if (curChar == 77)
                     jjCheckNAdd(7);
                  break;
               case 11:
                  if (curChar == 88)
                     jjAddStates(0, 3);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 183)
                     kind = 183;
                  jjCheckNAdd(1);
                  break;
               case 1:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 183)
                     kind = 183;
                  jjCheckNAdd(1);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 16 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_19()
{
   return jjMoveNfa_19(0, 0);
}
private int jjMoveNfa_19(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 1;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x100002600L & l) == 0L)
                     break;
                  kind = 120;
                  jjstateSet[jjnewStateCnt++] = 0;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 1 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_18()
{
   return jjMoveNfa_18(1, 0);
}
private int jjMoveNfa_18(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 6;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
               case 0:
                  if ((0x100002600L & l) == 0L)
                     break;
                  kind = 120;
                  jjCheckNAdd(0);
                  break;
               case 2:
                  if ((0x3ff600000000000L & l) != 0L)
                     jjAddStates(9, 10);
                  break;
               case 3:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 5:
                  if ((0x3ff600000000000L & l) == 0L)
                     break;
                  if (kind > 186)
                     kind = 186;
                  jjstateSet[jjnewStateCnt++] = 5;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 186)
                     kind = 186;
                  jjCheckNAddStates(11, 13);
                  break;
               case 2:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(2, 3);
                  break;
               case 4:
               case 5:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 186)
                     kind = 186;
                  jjCheckNAdd(5);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 186)
                     kind = 186;
                  jjCheckNAddStates(11, 13);
                  break;
               case 2:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(2, 3);
                  break;
               case 4:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 186)
                     kind = 186;
                  jjCheckNAdd(5);
                  break;
               case 5:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 186)
                     kind = 186;
                  jjCheckNAdd(5);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 6 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_17()
{
   return jjMoveNfa_17(0, 0);
}
private int jjMoveNfa_17(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 1;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x100002600L & l) == 0L)
                     break;
                  kind = 120;
                  jjstateSet[jjnewStateCnt++] = 0;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 1 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_30(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      case 0:
         if ((active2 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 168;
            return -1;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_30(int pos, long active0, long active1, long active2)
{
   return jjMoveNfa_30(jjStopStringLiteralDfa_30(pos, active0, active1, active2), pos + 1);
}
private int jjMoveStringLiteralDfa0_30()
{
   switch(curChar)
   {
      case 63:
         return jjMoveStringLiteralDfa1_30(0x8000000000L);
      default :
         return jjMoveNfa_30(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_30(long active2)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_30(0, 0L, 0L, active2);
      return 1;
   }
   switch(curChar)
   {
      case 62:
         if ((active2 & 0x8000000000L) != 0L)
            return jjStopAtPos(1, 167);
         break;
      default :
         break;
   }
   return jjStartNfa_30(0, 0L, 0L, active2);
}
static final long[] jjbitVec40 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0x7fffffffffffffffL
};
static final long[] jjbitVec41 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec42 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0x3fffffffffffffffL
};
private int jjMoveNfa_30(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 1;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xffffffff00002600L & l) != 0L)
                     kind = 168;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  kind = 168;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2) && kind > 168)
                     kind = 168;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 1 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_27(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_27(int pos, long active0, long active1, long active2)
{
   return jjMoveNfa_27(jjStopStringLiteralDfa_27(pos, active0, active1, active2), pos + 1);
}
private int jjMoveStringLiteralDfa0_27()
{
   switch(curChar)
   {
      case 62:
         return jjStopAtPos(0, 159);
      default :
         return jjMoveNfa_27(1, 0);
   }
}
private int jjMoveNfa_27(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 6;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
               case 0:
                  if ((0x100002600L & l) == 0L)
                     break;
                  kind = 192;
                  jjCheckNAdd(0);
                  break;
               case 2:
                  if ((0x3ff600000000000L & l) != 0L)
                     jjAddStates(9, 10);
                  break;
               case 3:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 5:
                  if ((0x3ff600000000000L & l) == 0L)
                     break;
                  if (kind > 188)
                     kind = 188;
                  jjstateSet[jjnewStateCnt++] = 5;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 188)
                     kind = 188;
                  jjCheckNAddStates(11, 13);
                  break;
               case 2:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(2, 3);
                  break;
               case 4:
               case 5:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 188)
                     kind = 188;
                  jjCheckNAdd(5);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 188)
                     kind = 188;
                  jjCheckNAddStates(11, 13);
                  break;
               case 2:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(2, 3);
                  break;
               case 4:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 188)
                     kind = 188;
                  jjCheckNAdd(5);
                  break;
               case 5:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 188)
                     kind = 188;
                  jjCheckNAdd(5);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 6 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_25(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      case 0:
         if ((active2 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 152;
            return -1;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_25(int pos, long active0, long active1, long active2)
{
   return jjMoveNfa_25(jjStopStringLiteralDfa_25(pos, active0, active1, active2), pos + 1);
}
private int jjMoveStringLiteralDfa0_25()
{
   switch(curChar)
   {
      case 35:
         return jjMoveStringLiteralDfa1_25(0x400000000L);
      default :
         return jjMoveNfa_25(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_25(long active2)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_25(0, 0L, 0L, active2);
      return 1;
   }
   switch(curChar)
   {
      case 41:
         if ((active2 & 0x400000000L) != 0L)
            return jjStopAtPos(1, 162);
         break;
      default :
         break;
   }
   return jjStartNfa_25(0, 0L, 0L, active2);
}
private int jjMoveNfa_25(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 1;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xffffffff00002600L & l) != 0L)
                     kind = 152;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  kind = 152;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2) && kind > 152)
                     kind = 152;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 1 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_26(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      case 0:
         if ((active2 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 156;
            return 2;
         }
         return -1;
      case 1:
         if ((active2 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 163;
            jjmatchedPos = 1;
            return -1;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_26(int pos, long active0, long active1, long active2)
{
   return jjMoveNfa_26(jjStopStringLiteralDfa_26(pos, active0, active1, active2), pos + 1);
}
private int jjMoveStringLiteralDfa0_26()
{
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa1_26(0x800000000000L);
      default :
         return jjMoveNfa_26(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_26(long active2)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_26(0, 0L, 0L, active2);
      return 1;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa2_26(active2, 0x800000000000L);
      default :
         break;
   }
   return jjStartNfa_26(0, 0L, 0L, active2);
}
private int jjMoveStringLiteralDfa2_26(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_26(0, 0L, 0L, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_26(1, 0L, 0L, active2);
      return 2;
   }
   switch(curChar)
   {
      case 62:
         if ((active2 & 0x800000000000L) != 0L)
            return jjStopAtPos(2, 175);
         break;
      default :
         break;
   }
   return jjStartNfa_26(1, 0L, 0L, active2);
}
private int jjMoveNfa_26(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 4;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xffffffff00002600L & l) != 0L)
                  {
                     if (kind > 156)
                        kind = 156;
                  }
                  if (curChar == 45)
                     jjAddStates(9, 10);
                  break;
               case 2:
                  if ((0xffffffff00002600L & l) != 0L)
                  {
                     if (kind > 164)
                        kind = 164;
                  }
                  if (curChar == 45)
                  {
                     if (kind > 163)
                        kind = 163;
                  }
                  break;
               case 1:
                  if (curChar == 45)
                     jjAddStates(9, 10);
                  break;
               case 3:
                  if ((0xffffffff00002600L & l) != 0L && kind > 164)
                     kind = 164;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (kind > 156)
                     kind = 156;
                  break;
               case 2:
                  if (kind > 164)
                     kind = 164;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2) && kind > 156)
                     kind = 156;
                  break;
               case 2:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2) && kind > 164)
                     kind = 164;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 4 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_1()
{
   return jjMoveNfa_1(0, 0);
}
private int jjMoveNfa_1(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 1;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x100002600L & l) == 0L)
                     break;
                  kind = 120;
                  jjstateSet[jjnewStateCnt++] = 0;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 1 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_9()
{
   return jjMoveNfa_9(0, 0);
}
private int jjMoveNfa_9(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 1;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x100002600L & l) == 0L)
                     break;
                  kind = 120;
                  jjstateSet[jjnewStateCnt++] = 0;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 1 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_32(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      case 0:
         if ((active2 & 0xa000000000000L) != 0L)
         {
            jjmatchedKind = 178;
            return -1;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_32(int pos, long active0, long active1, long active2)
{
   return jjMoveNfa_32(jjStopStringLiteralDfa_32(pos, active0, active1, active2), pos + 1);
}
private int jjMoveStringLiteralDfa0_32()
{
   switch(curChar)
   {
      case 40:
         return jjMoveStringLiteralDfa1_32(0x2000000000000L);
      case 58:
         return jjMoveStringLiteralDfa1_32(0x8000000000000L);
      default :
         return jjMoveNfa_32(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_32(long active2)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_32(0, 0L, 0L, active2);
      return 1;
   }
   switch(curChar)
   {
      case 41:
         if ((active2 & 0x8000000000000L) != 0L)
            return jjStopAtPos(1, 179);
         break;
      case 58:
         if ((active2 & 0x2000000000000L) != 0L)
            return jjStopAtPos(1, 177);
         break;
      default :
         break;
   }
   return jjStartNfa_32(0, 0L, 0L, active2);
}
private int jjMoveNfa_32(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 1;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xffffffff00002600L & l) != 0L)
                     kind = 178;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  kind = 178;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2) && kind > 178)
                     kind = 178;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 1 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_12()
{
   return jjMoveNfa_12(0, 0);
}
private int jjMoveNfa_12(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 1;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x100002600L & l) == 0L)
                     break;
                  kind = 120;
                  jjstateSet[jjnewStateCnt++] = 0;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 1 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_2()
{
   return jjMoveNfa_2(0, 0);
}
private int jjMoveNfa_2(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 1;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x100002600L & l) == 0L)
                     break;
                  kind = 120;
                  jjstateSet[jjnewStateCnt++] = 0;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 1 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_21(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      case 0:
         if ((active2 & 0x8000L) != 0L)
            return 3;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_21(int pos, long active0, long active1, long active2)
{
   return jjMoveNfa_21(jjStopStringLiteralDfa_21(pos, active0, active1, active2), pos + 1);
}
private int jjMoveStringLiteralDfa0_21()
{
   switch(curChar)
   {
      case 38:
         return jjStartNfaWithStates_21(0, 143, 3);
      case 60:
         jjmatchedKind = 145;
         return jjMoveStringLiteralDfa1_21(0x484040000000L);
      case 123:
         jjmatchedKind = 137;
         return jjMoveStringLiteralDfa1_21(0x2000L);
      case 125:
         jjmatchedKind = 140;
         return jjMoveStringLiteralDfa1_21(0x4000L);
      default :
         return jjMoveNfa_21(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_21(long active2)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_21(0, 0L, 0L, active2);
      return 1;
   }
   switch(curChar)
   {
      case 33:
         return jjMoveStringLiteralDfa2_21(active2, 0x480000000000L);
      case 47:
         if ((active2 & 0x40000000L) != 0L)
            return jjStopAtPos(1, 158);
         break;
      case 63:
         if ((active2 & 0x4000000000L) != 0L)
            return jjStopAtPos(1, 166);
         break;
      case 123:
         if ((active2 & 0x2000L) != 0L)
            return jjStopAtPos(1, 141);
         break;
      case 125:
         if ((active2 & 0x4000L) != 0L)
            return jjStopAtPos(1, 142);
         break;
      default :
         break;
   }
   return jjStartNfa_21(0, 0L, 0L, active2);
}
private int jjMoveStringLiteralDfa2_21(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_21(0, 0L, 0L, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_21(1, 0L, 0L, active2);
      return 2;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa3_21(active2, 0x400000000000L);
      case 91:
         return jjMoveStringLiteralDfa3_21(active2, 0x80000000000L);
      default :
         break;
   }
   return jjStartNfa_21(1, 0L, 0L, active2);
}
private int jjMoveStringLiteralDfa3_21(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_21(1, 0L, 0L, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_21(2, 0L, 0L, active2);
      return 3;
   }
   switch(curChar)
   {
      case 45:
         if ((active2 & 0x400000000000L) != 0L)
            return jjStopAtPos(3, 174);
         break;
      case 67:
         return jjMoveStringLiteralDfa4_21(active2, 0x80000000000L);
      default :
         break;
   }
   return jjStartNfa_21(2, 0L, 0L, active2);
}
private int jjMoveStringLiteralDfa4_21(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_21(2, 0L, 0L, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_21(3, 0L, 0L, active2);
      return 4;
   }
   switch(curChar)
   {
      case 68:
         return jjMoveStringLiteralDfa5_21(active2, 0x80000000000L);
      default :
         break;
   }
   return jjStartNfa_21(3, 0L, 0L, active2);
}
private int jjMoveStringLiteralDfa5_21(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_21(3, 0L, 0L, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_21(4, 0L, 0L, active2);
      return 5;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa6_21(active2, 0x80000000000L);
      default :
         break;
   }
   return jjStartNfa_21(4, 0L, 0L, active2);
}
private int jjMoveStringLiteralDfa6_21(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_21(4, 0L, 0L, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_21(5, 0L, 0L, active2);
      return 6;
   }
   switch(curChar)
   {
      case 84:
         return jjMoveStringLiteralDfa7_21(active2, 0x80000000000L);
      default :
         break;
   }
   return jjStartNfa_21(5, 0L, 0L, active2);
}
private int jjMoveStringLiteralDfa7_21(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_21(5, 0L, 0L, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_21(6, 0L, 0L, active2);
      return 7;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa8_21(active2, 0x80000000000L);
      default :
         break;
   }
   return jjStartNfa_21(6, 0L, 0L, active2);
}
private int jjMoveStringLiteralDfa8_21(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_21(6, 0L, 0L, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_21(7, 0L, 0L, active2);
      return 8;
   }
   switch(curChar)
   {
      case 91:
         if ((active2 & 0x80000000000L) != 0L)
            return jjStopAtPos(8, 171);
         break;
      default :
         break;
   }
   return jjStartNfa_21(7, 0L, 0L, active2);
}
private int jjStartNfaWithStates_21(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_21(state, pos + 1);
}
private int jjMoveNfa_21(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 21;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if (curChar == 35)
                     jjCheckNAddTwoStates(16, 18);
                  break;
               case 0:
                  if ((0xffffffff00002600L & l) != 0L)
                  {
                     if (kind > 153)
                        kind = 153;
                  }
                  if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 15;
                  if (curChar == 38)
                     jjAddStates(14, 17);
                  break;
               case 2:
                  if (curChar == 59 && kind > 133)
                     kind = 133;
                  break;
               case 14:
                  if ((0xffffffff00002600L & l) != 0L && kind > 153)
                     kind = 153;
                  break;
               case 16:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(16, 17);
                  break;
               case 17:
                  if (curChar == 59 && kind > 184)
                     kind = 184;
                  break;
               case 19:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(19, 17);
                  break;
               case 20:
                  if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if (curChar == 97)
                     jjAddStates(18, 19);
                  else if (curChar == 113)
                     jjstateSet[jjnewStateCnt++] = 6;
                  else if (curChar == 103)
                     jjCheckNAdd(1);
                  else if (curChar == 108)
                     jjCheckNAdd(1);
                  break;
               case 0:
                  if (kind > 153)
                     kind = 153;
                  break;
               case 1:
                  if (curChar == 116)
                     jjCheckNAdd(2);
                  break;
               case 4:
                  if (curChar == 103)
                     jjCheckNAdd(1);
                  break;
               case 5:
                  if (curChar == 111)
                     jjCheckNAdd(1);
                  break;
               case 6:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 7:
                  if (curChar == 113)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 8:
                  if (curChar == 97)
                     jjAddStates(18, 19);
                  break;
               case 9:
                  if (curChar == 112)
                     jjCheckNAdd(2);
                  break;
               case 10:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 11:
                  if (curChar == 115)
                     jjCheckNAdd(2);
                  break;
               case 12:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 13:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 18:
                  if (curChar == 120)
                     jjCheckNAdd(19);
                  break;
               case 19:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddTwoStates(19, 17);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2) && kind > 153)
                     kind = 153;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 21 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_7()
{
   return jjMoveNfa_7(0, 0);
}
private int jjMoveNfa_7(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 1;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x100002600L & l) == 0L)
                     break;
                  kind = 120;
                  jjstateSet[jjnewStateCnt++] = 0;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 1 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_6()
{
   return jjMoveNfa_6(0, 0);
}
private int jjMoveNfa_6(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 1;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x100002600L & l) == 0L)
                     break;
                  kind = 120;
                  jjstateSet[jjnewStateCnt++] = 0;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 1 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_8()
{
   return jjMoveNfa_8(0, 0);
}
private int jjMoveNfa_8(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 1;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x100002600L & l) == 0L)
                     break;
                  kind = 120;
                  jjstateSet[jjnewStateCnt++] = 0;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 1 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_31()
{
   return jjMoveNfa_31(0, 0);
}
private int jjMoveNfa_31(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 4;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xffffffff00002600L & l) != 0L && kind > 169)
                     kind = 169;
                  break;
               case 3:
                  if (curChar == 62 && kind > 172)
                     kind = 172;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (kind > 169)
                     kind = 169;
                  if (curChar == 93)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 1:
                  if (curChar == 93)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 2:
                  if (curChar == 93)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2) && kind > 169)
                     kind = 169;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 4 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_28(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_28(int pos, long active0, long active1, long active2)
{
   return jjMoveNfa_28(jjStopStringLiteralDfa_28(pos, active0, active1, active2), pos + 1);
}
private int jjMoveStringLiteralDfa0_28()
{
   switch(curChar)
   {
      case 35:
         return jjMoveStringLiteralDfa1_28(0x400000000L);
      default :
         return jjMoveNfa_28(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_28(long active2)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_28(0, 0L, 0L, active2);
      return 1;
   }
   switch(curChar)
   {
      case 41:
         if ((active2 & 0x400000000L) != 0L)
            return jjStopAtPos(1, 162);
         break;
      default :
         break;
   }
   return jjStartNfa_28(0, 0L, 0L, active2);
}
private int jjMoveNfa_28(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 1;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x100002600L & l) == 0L)
                     break;
                  kind = 193;
                  jjstateSet[jjnewStateCnt++] = 0;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 1 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_13()
{
   return jjMoveNfa_13(0, 0);
}
private int jjMoveNfa_13(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 1;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x100002600L & l) == 0L)
                     break;
                  kind = 120;
                  jjstateSet[jjnewStateCnt++] = 0;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 1 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_14()
{
   return jjMoveNfa_14(0, 0);
}
private int jjMoveNfa_14(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 1;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x100002600L & l) == 0L)
                     break;
                  kind = 120;
                  jjstateSet[jjnewStateCnt++] = 0;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 1 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_24(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_24(int pos, long active0, long active1, long active2)
{
   return jjMoveNfa_24(jjStopStringLiteralDfa_24(pos, active0, active1, active2), pos + 1);
}
private int jjMoveStringLiteralDfa0_24()
{
   switch(curChar)
   {
      case 34:
         return jjStopAtPos(0, 148);
      case 39:
         return jjStopAtPos(0, 150);
      case 47:
         return jjMoveStringLiteralDfa1_24(0x20000000L);
      case 61:
         return jjStopAtPos(0, 160);
      case 62:
         return jjStopAtPos(0, 147);
      default :
         return jjMoveNfa_24(1, 0);
   }
}
private int jjMoveStringLiteralDfa1_24(long active2)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_24(0, 0L, 0L, active2);
      return 1;
   }
   switch(curChar)
   {
      case 62:
         if ((active2 & 0x20000000L) != 0L)
            return jjStopAtPos(1, 157);
         break;
      default :
         break;
   }
   return jjStartNfa_24(0, 0L, 0L, active2);
}
private int jjMoveNfa_24(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 6;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
               case 0:
                  if ((0x100002600L & l) == 0L)
                     break;
                  kind = 192;
                  jjCheckNAdd(0);
                  break;
               case 2:
                  if ((0x3ff600000000000L & l) != 0L)
                     jjAddStates(9, 10);
                  break;
               case 3:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 5:
                  if ((0x3ff600000000000L & l) == 0L)
                     break;
                  if (kind > 187)
                     kind = 187;
                  jjstateSet[jjnewStateCnt++] = 5;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 187)
                     kind = 187;
                  jjCheckNAddStates(11, 13);
                  break;
               case 2:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(2, 3);
                  break;
               case 4:
               case 5:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 187)
                     kind = 187;
                  jjCheckNAdd(5);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 187)
                     kind = 187;
                  jjCheckNAddStates(11, 13);
                  break;
               case 2:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(2, 3);
                  break;
               case 4:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 187)
                     kind = 187;
                  jjCheckNAdd(5);
                  break;
               case 5:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 187)
                     kind = 187;
                  jjCheckNAdd(5);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 6 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_11()
{
   return jjMoveNfa_11(0, 0);
}
private int jjMoveNfa_11(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 1;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x100002600L & l) == 0L)
                     break;
                  kind = 120;
                  jjstateSet[jjnewStateCnt++] = 0;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 1 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_10()
{
   return jjMoveNfa_10(0, 0);
}
private int jjMoveNfa_10(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 1;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x100002600L & l) == 0L)
                     break;
                  kind = 120;
                  jjstateSet[jjnewStateCnt++] = 0;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 1 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_4()
{
   return jjMoveNfa_4(0, 0);
}
private int jjMoveNfa_4(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 1;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x100002600L & l) == 0L)
                     break;
                  kind = 120;
                  jjstateSet[jjnewStateCnt++] = 0;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 1 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_5()
{
   return jjMoveNfa_5(0, 0);
}
private int jjMoveNfa_5(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 1;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x100002600L & l) == 0L)
                     break;
                  kind = 120;
                  jjstateSet[jjnewStateCnt++] = 0;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 1 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      case 0:
         if ((active1 & 0x9000000000L) != 0L)
            return 107;
         if ((active0 & 0xbdffffc9ff7ffe7cL) != 0L || (active1 & 0xf00fef0fbf79fc3fL) != 0L || (active2 & 0x1L) != 0L)
         {
            jjmatchedKind = 185;
            return 108;
         }
         if ((active0 & 0x200000000000000L) != 0L)
            return 69;
         if ((active0 & 0x400000002L) != 0L || (active1 & 0x800040L) != 0L)
         {
            jjmatchedKind = 195;
            return -1;
         }
         return -1;
      case 1:
         if ((active0 & 0x3cb7e9897d69fe7cL) != 0L || (active1 & 0xd00fef0fbd780039L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 185;
               jjmatchedPos = 1;
            }
            return 108;
         }
         if ((active0 & 0x8148164082160000L) != 0L || (active1 & 0x200000000201fc06L) != 0L || (active2 & 0x1L) != 0L)
            return 108;
         if ((active0 & 0x400000002L) != 0L || (active1 & 0x800040L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 195;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 2:
         if ((active0 & 0x1480050000000020L) != 0L || (active1 & 0x100000L) != 0L)
            return 108;
         if ((active0 & 0x2L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 195;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active0 & 0xa837e8897f7ffe5cL) != 0L || (active1 & 0xf00fef0fbf68003bL) != 0L || (active2 & 0x1L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 185;
               jjmatchedPos = 2;
            }
            return 108;
         }
         return -1;
      case 3:
         if ((active0 & 0xa001a8897f7ffe7cL) != 0L || (active1 & 0xf0072d0fbb68000bL) != 0L || (active2 & 0x1L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 185;
               jjmatchedPos = 3;
            }
            return 108;
         }
         if ((active0 & 0x836400000000000L) != 0L || (active1 & 0x8c20004000030L) != 0L)
            return 108;
         return -1;
      case 4:
         if ((active0 & 0x2000880000361000L) != 0L || (active1 & 0x200000400008L) != 0L || (active2 & 0x1L) != 0L)
            return 108;
         if ((active0 & 0x800320897f49ee7cL) != 0L || (active1 & 0xf0070d0fbb280013L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 185;
               jjmatchedPos = 4;
            }
            return 108;
         }
         return -1;
      case 5:
         if ((active0 & 0x208060010024L) != 0L || (active1 & 0x6000080200001L) != 0L)
            return 108;
         if ((active0 & 0x800300091f4eee58L) != 0L || (active1 & 0xf0012d0f3b080012L) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 185;
               jjmatchedPos = 5;
            }
            return 108;
         }
         return -1;
      case 6:
         if ((active0 & 0x800300091d4a8c50L) != 0L || (active1 & 0xf007290f3b080012L) != 0L)
         {
            jjmatchedKind = 185;
            jjmatchedPos = 6;
            return 108;
         }
         if ((active0 & 0x2046208L) != 0L || (active1 & 0x40000000000L) != 0L)
            return 108;
         return -1;
      case 7:
         if ((active0 & 0x110028810L) != 0L || (active1 & 0x9001010900080012L) != 0L)
            return 108;
         if ((active0 & 0x800300080d480440L) != 0L || (active1 & 0x600628063b000000L) != 0L)
         {
            if (jjmatchedPos != 7)
            {
               jjmatchedKind = 185;
               jjmatchedPos = 7;
            }
            return 108;
         }
         return -1;
      case 8:
         if ((active0 & 0x2000805400400L) != 0L || (active1 & 0x4007280809000000L) != 0L)
         {
            if (jjmatchedPos != 8)
            {
               jjmatchedKind = 185;
               jjmatchedPos = 8;
            }
            return 108;
         }
         if ((active0 & 0x8001000008080040L) != 0L || (active1 & 0x2000000632000000L) != 0L)
            return 108;
         return -1;
      case 9:
         if ((active0 & 0x801400400L) != 0L || (active1 & 0x7280a10000000L) != 0L)
         {
            if (jjmatchedPos != 9)
            {
               jjmatchedKind = 185;
               jjmatchedPos = 9;
            }
            return 108;
         }
         if ((active0 & 0x2000004000000L) != 0L || (active1 & 0x4000000009000000L) != 0L)
            return 108;
         return -1;
      case 10:
         if ((active0 & 0x1000000L) != 0L)
            return 108;
         if ((active0 & 0x800400400L) != 0L || (active1 & 0x7280a18000000L) != 0L)
         {
            jjmatchedKind = 185;
            jjmatchedPos = 10;
            return 108;
         }
         return -1;
      case 11:
         if ((active0 & 0x400400L) != 0L || (active1 & 0x7280a18000000L) != 0L)
         {
            jjmatchedKind = 185;
            jjmatchedPos = 11;
            return 108;
         }
         if ((active0 & 0x800000000L) != 0L)
            return 108;
         return -1;
      case 12:
         if ((active1 & 0x1000000000000L) != 0L)
            return 108;
         if ((active0 & 0x400400L) != 0L || (active1 & 0x6280a18000000L) != 0L)
         {
            jjmatchedKind = 185;
            jjmatchedPos = 12;
            return 108;
         }
         return -1;
      case 13:
         if ((active0 & 0x400L) != 0L || (active1 & 0x4200000000000L) != 0L)
            return 108;
         if ((active0 & 0x400000L) != 0L || (active1 & 0x2080a18000000L) != 0L)
         {
            jjmatchedKind = 185;
            jjmatchedPos = 13;
            return 108;
         }
         return -1;
      case 14:
         if ((active1 & 0x2080a18000000L) != 0L)
         {
            jjmatchedKind = 185;
            jjmatchedPos = 14;
            return 108;
         }
         if ((active0 & 0x400000L) != 0L)
            return 108;
         return -1;
      case 15:
         if ((active1 & 0x2000800000000L) != 0L)
            return 108;
         if ((active1 & 0x80218000000L) != 0L)
         {
            jjmatchedKind = 185;
            jjmatchedPos = 15;
            return 108;
         }
         return -1;
      case 16:
         if ((active1 & 0x210000000L) != 0L)
            return 108;
         if ((active1 & 0x80008000000L) != 0L)
         {
            jjmatchedKind = 185;
            jjmatchedPos = 16;
            return 108;
         }
         return -1;
      case 17:
         if ((active1 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 185;
            jjmatchedPos = 17;
            return 108;
         }
         if ((active1 & 0x8000000L) != 0L)
            return 108;
         return -1;
      case 18:
         if ((active1 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 185;
            jjmatchedPos = 18;
            return 108;
         }
         return -1;
      case 19:
         if ((active1 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 185;
            jjmatchedPos = 19;
            return 108;
         }
         return -1;
      case 20:
         if ((active1 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 185;
            jjmatchedPos = 20;
            return 108;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1, long active2)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1, active2), pos + 1);
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x40L, 0x0L);
      case 36:
         return jjStopAtPos(0, 33);
      case 37:
         return jjMoveStringLiteralDfa1_0(0x2L, 0x0L, 0x0L);
      case 40:
         jjmatchedKind = 36;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x2000200000000L);
      case 41:
         return jjStopAtPos(0, 37);
      case 42:
         return jjStartNfaWithStates_0(0, 57, 69);
      case 43:
         return jjStopAtPos(0, 123);
      case 44:
         return jjStopAtPos(0, 23);
      case 45:
         return jjStopAtPos(0, 122);
      case 46:
         jjmatchedKind = 103;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1000000000L, 0x0L);
      case 47:
         jjmatchedKind = 180;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x20000000000000L);
      case 58:
         return jjMoveStringLiteralDfa1_0(0x400000000L, 0x800000L, 0x0L);
      case 59:
         return jjStopAtPos(0, 8);
      case 60:
         jjmatchedKind = 144;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x20080L, 0x242000000000L);
      case 61:
         return jjStopAtPos(0, 7);
      case 62:
         jjmatchedKind = 72;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x40200L, 0x0L);
      case 63:
         return jjStopAtPos(0, 108);
      case 64:
         return jjStopAtPos(0, 94);
      case 91:
         return jjStopAtPos(0, 101);
      case 93:
         return jjStopAtPos(0, 102);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x80004080000000L, 0x2000000902000000L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x100010000400L, 0x0L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x4000808400000L, 0x40000400030L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x400000000002200L, 0x4001010009000000L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x20800000204010L, 0x1000200000000401L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x10000008000L, 0x30000000L, 0x0L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x800000000000c000L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x8808020022000000L, 0x400000010002L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x40000000000L, 0x103000L, 0x1L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x1000000000000020L, 0x0L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x5000040L, 0x800000000800L, 0x0L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x40000000170000L, 0x4L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x800L, 0x80680000000L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x8000000000L, 0x0L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x1600040001000L, 0x6000004200000L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x112000000000000L, 0x8020000000008L, 0x0L);
      case 117:
         return jjMoveStringLiteralDfa1_0(0x2000000000080000L, 0x0L, 0x0L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x100000008L, 0x80000L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x80000000000L, 0x0L, 0x0L);
      case 120:
         return jjMoveStringLiteralDfa1_0(0x4L, 0x0L, 0x0L);
      case 123:
         return jjStopAtPos(0, 138);
      case 124:
         return jjStopAtPos(0, 62);
      case 125:
         return jjStopAtPos(0, 139);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1, long active2)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1, active2);
      return 1;
   }
   switch(curChar)
   {
      case 33:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x240000000000L);
      case 35:
         if ((active2 & 0x200000000L) != 0L)
            return jjStopAtPos(1, 161);
         break;
      case 37:
         return jjMoveStringLiteralDfa2_0(active0, 0x2L, active1, 0L, active2, 0L);
      case 46:
         if ((active1 & 0x1000000000L) != 0L)
            return jjStopAtPos(1, 100);
         break;
      case 47:
         if ((active2 & 0x20000000000000L) != 0L)
            return jjStopAtPos(1, 181);
         break;
      case 58:
         if ((active1 & 0x800000L) != 0L)
            return jjStopAtPos(1, 87);
         else if ((active2 & 0x2000000000000L) != 0L)
            return jjStopAtPos(1, 177);
         break;
      case 60:
         if ((active1 & 0x20000L) != 0L)
            return jjStopAtPos(1, 81);
         break;
      case 61:
         if ((active0 & 0x400000000L) != 0L)
            return jjStopAtPos(1, 34);
         else if ((active1 & 0x40L) != 0L)
            return jjStopAtPos(1, 70);
         else if ((active1 & 0x80L) != 0L)
            return jjStopAtPos(1, 71);
         else if ((active1 & 0x200L) != 0L)
            return jjStopAtPos(1, 73);
         break;
      case 62:
         if ((active1 & 0x40000L) != 0L)
            return jjStopAtPos(1, 82);
         break;
      case 63:
         if ((active2 & 0x2000000000L) != 0L)
            return jjStopAtPos(1, 165);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x5000110000040L, active1, 0x80180030L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000000L, active1, 0x6000000000000L, active2, 0L);
      case 100:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000000000L, active1, 0L, active2, 0L);
      case 101:
         if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(1, 75, 108);
         else if ((active1 & 0x2000L) != 0L)
         {
            jjmatchedKind = 77;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(1, 79, 108);
         return jjMoveStringLiteralDfa2_0(active0, 0x48000002208L, active1, 0x400002000d000000L, active2, 0x1L);
      case 102:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 51, 108);
         else if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(1, 66, 108);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x10080000000000L, active1, 0x400000L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000000000L, active1, 0L, active2, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000000004000L, active1, 0L, active2, 0L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x20200000L, active1, 0x200000000000L, active2, 0L);
      case 110:
         if ((active0 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 41;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0xa080000002080010L, active1, 0x900000002L, active2, 0L);
      case 111:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 56, 108);
         return jjMoveStringLiteralDfa2_0(active0, 0x100041080d400420L, active1, 0x1850030000000L, active2, 0L);
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000L, active1, 0L, active2, 0L);
      case 113:
         if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(1, 74, 108);
         return jjMoveStringLiteralDfa2_0(active0, 0x4L, active1, 0L, active2, 0L);
      case 114:
         if ((active0 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 54;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x160800L, active1, 0x8000080600000008L, active2, 0L);
      case 115:
         if ((active0 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 38;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(1, 80, 108);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x2000000000000000L, active2, 0L);
      case 116:
         if ((active0 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 31;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(1, 76, 108);
         else if ((active1 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(1, 78, 108);
         return jjMoveStringLiteralDfa2_0(active0, 0x200000001000L, active1, 0x400002200000L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000L, active1, 0L, active2, 0L);
      case 118:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000000L, active1, 0L, active2, 0L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1000000000000001L, active2, 0L);
      case 121:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 44, 108);
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000000000L, active1, 0x8000000000000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1, active2);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(0, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1, active2);
      return 2;
   }
   switch(curChar)
   {
      case 37:
         if ((active0 & 0x2L) != 0L)
            return jjStopAtPos(2, 1);
         break;
      case 45:
         return jjMoveStringLiteralDfa3_0(active0, 0x5000000L, active1, 0L, active2, 0x200000000000L);
      case 91:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x40000000000L);
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000000L, active1, 0L, active2, 0x1L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x210L, active1, 0x2001010900000001L, active2, 0L);
      case 100:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 55, 108);
         else if ((active0 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x160020L, active1, 0x800000000000L, active2, 0L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x10880000004800L, active1, 0x8000400600000008L, active2, 0L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000L, active1, 0L, active2, 0L);
      case 104:
         return jjMoveStringLiteralDfa3_0(active0, 0x42000000L, active1, 0x6000000000000L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x2800000000000000L, active1, 0x400000L, active2, 0L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000L, active1, 0x34080000L, active2, 0L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000040L, active1, 0x40000000000L, active2, 0L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x800008000L, active1, 0L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000L, active1, 0x80000000000L, active2, 0L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000020600000L, active1, 0x8200000000000L, active2, 0L);
      case 114:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 40, 108);
         return jjMoveStringLiteralDfa3_0(active0, 0x100001008L, active1, 0x80200000L, active2, 0L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x24000010000000L, active1, 0x4000000009000032L, active2, 0L);
      case 116:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 42, 108);
         return jjMoveStringLiteralDfa3_0(active0, 0x8001008000010000L, active1, 0x1000000002000000L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x404L, active1, 0L, active2, 0L);
      case 118:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 58, 108);
         break;
      case 120:
         if ((active1 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(2, 84, 108);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x20000000000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1, active2);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(1, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1, active2);
      return 3;
   }
   switch(curChar)
   {
      case 45:
         if ((active2 & 0x200000000000L) != 0L)
            return jjStopAtPos(3, 173);
         break;
      case 67:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x40000000000L);
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000L, active1, 0x8000000000000008L, active2, 0L);
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000000000L, active1, 0L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000L, active1, 0x4000080609000000L, active2, 0L);
      case 101:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 46, 108);
         else if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 50, 108);
         else if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 53, 108);
         else if ((active1 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 111, 108);
         else if ((active1 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 115;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x8002000052160044L, active1, 0x3006000980000001L, active2, 0L);
      case 102:
         if ((active1 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(3, 90, 108);
         break;
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000104011000L, active1, 0x280000L, active2, 0L);
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000200L, active1, 0x30400000L, active2, 0L);
      case 109:
         if ((active1 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 110, 108);
         return jjMoveStringLiteralDfa4_0(active0, 0x4000L, active1, 0x40000000000L, active2, 0L);
      case 110:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 52, 108);
         return jjMoveStringLiteralDfa4_0(active0, 0x400L, active1, 0L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000020000010L, active1, 0L, active2, 0L);
      case 112:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000L, active1, 0L, active2, 0L);
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x880000080000L, active1, 0x2000000L, active2, 0L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000808L, active1, 0L, active2, 0x1L);
      case 116:
         if ((active1 & 0x20L) != 0L)
         {
            jjmatchedKind = 69;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 105, 108);
         return jjMoveStringLiteralDfa4_0(active0, 0x200000L, active1, 0x200000000012L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000020L, active1, 0x1010000000000L, active2, 0L);
      case 118:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 59, 108);
         break;
      case 121:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000L, active1, 0L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1, active2);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(2, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1, active2);
      return 4;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa5_0(active0, 0x10400000L, active1, 0L, active2, 0L);
      case 68:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x40000000000L);
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x108000200L, active1, 0x12L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x200000L, active2, 0L);
      case 100:
         if ((active1 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(4, 86, 108);
         return jjMoveStringLiteralDfa5_0(active0, 0x80410L, active1, 0x80000L, active2, 0L);
      case 101:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 43, 108);
         return jjMoveStringLiteralDfa5_0(active0, 0x4800L, active1, 0x40000c0609000000L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x8L, active1, 0x2000000L, active2, 0L);
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x200000000020L, active1, 0L, active2, 0L);
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000000L, active1, 0x7010000000000L, active2, 0L);
      case 110:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 61, 108);
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000L, active1, 0x2000000080000000L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000L, active1, 0x30000000L, active2, 0L);
      case 112:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(4, 12, 108);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x1L, active2, 0L);
      case 114:
         if ((active0 & 0x100000L) != 0L)
         {
            jjmatchedKind = 20;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x8000008023060004L, active1, 0x1000000000000000L, active2, 0L);
      case 115:
         return jjMoveStringLiteralDfa5_0(active0, 0x3000000000040L, active1, 0x900000000L, active2, 0L);
      case 116:
         if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(4, 67, 108);
         else if ((active2 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(4, 128, 108);
         return jjMoveStringLiteralDfa5_0(active0, 0x800008000L, active1, 0x8000000000000000L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000L, active1, 0L, active2, 0L);
      case 121:
         if ((active0 & 0x200000L) != 0L)
         {
            jjmatchedKind = 21;
            jjmatchedPos = 4;
         }
         else if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 47, 108);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x200000000000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1, active2);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(3, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1, active2);
      return 5;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x200000000000L, active2, 0L);
      case 65:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x40000000000L);
      case 97:
         if ((active0 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 30;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x400L, active1, 0x6000000080000L, active2, 0L);
      case 98:
         return jjMoveStringLiteralDfa6_0(active0, 0x100000000L, active1, 0x2000010L, active2, 0L);
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x2000000600000000L, active2, 0L);
      case 101:
         if ((active0 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(5, 5, 108);
         else if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 45, 108);
         return jjMoveStringLiteralDfa6_0(active0, 0x10c0000L, active1, 0x8001010000000000L, active2, 0L);
      case 102:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000000000L, active1, 0L, active2, 0L);
      case 104:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000L, active1, 0L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x2028010L, active1, 0L, active2, 0L);
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000L, active1, 0L, active2, 0L);
      case 110:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(5, 16, 108);
         else if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 39, 108);
         return jjMoveStringLiteralDfa6_0(active0, 0x404000L, active1, 0x5000040009000002L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0x8L, active1, 0L, active2, 0L);
      case 112:
         return jjMoveStringLiteralDfa6_0(active0, 0x40L, active1, 0L, active2, 0L);
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x800000a00L, active1, 0L, active2, 0L);
      case 115:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000000000000L, active1, 0x80000000000L, active2, 0L);
      case 116:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(5, 29, 108);
         else if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(5, 64, 108);
         else if ((active1 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(5, 85, 108);
         else if ((active1 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(5, 95, 108);
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000L, active1, 0x900000000L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa6_0(active0, 0x10000000L, active1, 0L, active2, 0L);
      case 119:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000000000L, active1, 0x30000000L, active2, 0L);
      case 121:
         if ((active0 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(5, 2, 108);
         break;
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1, active2);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(4, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1, active2);
      return 6;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x6000000000000L, active2, 0L);
      case 84:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x40000000000L);
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x400040L, active1, 0x1000000000000000L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x2L, active2, 0L);
      case 100:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(6, 18, 108);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x4000000009000000L, active2, 0L);
      case 101:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(6, 9, 108);
         return jjMoveStringLiteralDfa7_0(active0, 0x8000000004000000L, active1, 0L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x3000008000000L, active1, 0x2000000630000000L, active2, 0L);
      case 108:
         return jjMoveStringLiteralDfa7_0(active0, 0x100000000L, active1, 0x10L, active2, 0L);
      case 110:
         if ((active0 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(6, 3, 108);
         return jjMoveStringLiteralDfa7_0(active0, 0x20010L, active1, 0x1010000000000L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000L, active1, 0x900000000L, active2, 0L);
      case 114:
         return jjMoveStringLiteralDfa7_0(active0, 0x10080400L, active1, 0L, active2, 0L);
      case 115:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000L, active1, 0x8000280000000000L, active2, 0L);
      case 116:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(6, 13, 108);
         else if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(6, 14, 108);
         else if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(6, 25, 108);
         else if ((active1 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 106, 108);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x80000L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x800000000L, active1, 0x2000000L, active2, 0L);
      case 118:
         return jjMoveStringLiteralDfa7_0(active0, 0x800L, active1, 0L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1, active2);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(5, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1, active2);
      return 7;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x40000000000L);
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x2000009000000L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x8000000800000040L, active1, 0L, active2, 0L);
      case 101:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(7, 11, 108);
         else if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(7, 32, 108);
         else if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(7, 65, 108);
         else if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(7, 68, 108);
         else if ((active1 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(7, 83, 108);
         return jjMoveStringLiteralDfa8_0(active0, 0x1000001080000L, active1, 0x4200000000000L, active2, 0L);
      case 103:
         if ((active0 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(7, 4, 108);
         else if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(7, 17, 108);
         break;
      case 105:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(7, 28, 108);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x4000080000000000L, active2, 0L);
      case 108:
         if ((active1 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 124, 108);
         break;
      case 109:
         return jjMoveStringLiteralDfa8_0(active0, 0x400000L, active1, 0L, active2, 0L);
      case 110:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(7, 15, 108);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x2000000630000000L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0x8000000L, active1, 0L, active2, 0L);
      case 114:
         if ((active1 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 96;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0x4000000L, active1, 0x800000000L, active2, 0L);
      case 116:
         if ((active1 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 104;
            jjmatchedPos = 7;
         }
         else if ((active1 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 127, 108);
         return jjMoveStringLiteralDfa8_0(active0, 0x2000000000000L, active1, 0x1000002000000L, active2, 0L);
      case 121:
         return jjMoveStringLiteralDfa8_0(active0, 0x400L, active1, 0L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1, active2);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(6, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1, active2);
      return 8;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa9_0(active0, 0x400L, active1, 0x1000800000000L, active2, 0L);
      case 91:
         if ((active2 & 0x40000000000L) != 0L)
            return jjStopAtPos(8, 170);
         break;
      case 99:
         return jjMoveStringLiteralDfa9_0(active0, 0x2000000000000L, active1, 0L, active2, 0L);
      case 100:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(8, 19, 108);
         break;
      case 101:
         if ((active0 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(8, 6, 108);
         else if ((active1 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(8, 89, 108);
         return jjMoveStringLiteralDfa9_0(active0, 0x400000L, active1, 0L, active2, 0L);
      case 103:
         if ((active1 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 93;
            jjmatchedPos = 8;
         }
         else if ((active1 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 98;
            jjmatchedPos = 8;
         }
         else if ((active1 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 125, 108);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x210000000L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x4000000L, active1, 0L, active2, 0L);
      case 108:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x4000000000000L, active2, 0L);
      case 110:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(8, 27, 108);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x4000080009000000L, active2, 0L);
      case 113:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x200000000000L, active2, 0L);
      case 114:
         return jjMoveStringLiteralDfa9_0(active0, 0x1000000L, active1, 0L, active2, 0L);
      case 115:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 48, 108);
         break;
      case 116:
         if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 63, 108);
         return jjMoveStringLiteralDfa9_0(active0, 0x800000000L, active1, 0x2000000000000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1, active2);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(7, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, active1, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x210000000L);
      case 101:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x4000000000000L);
      case 103:
         if ((active1 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 126, 108);
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x80000000000L);
      case 104:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 49, 108);
         break;
      case 105:
         return jjMoveStringLiteralDfa10_0(active0, 0x800000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x1000000000000L);
      case 111:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x800000000L);
      case 115:
         return jjMoveStringLiteralDfa10_0(active0, 0x400400L, active1, 0L);
      case 116:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(9, 26, 108);
         else if ((active1 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 88;
            jjmatchedPos = 9;
         }
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x2000008000000L);
      case 117:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x200000000000L);
      case 118:
         return jjMoveStringLiteralDfa10_0(active0, 0x1000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(8, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, active1, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x80008000000L);
      case 101:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(10, 24, 108);
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x200000000000L);
      case 109:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x4000000000000L);
      case 111:
         return jjMoveStringLiteralDfa11_0(active0, 0x800000000L, active1, 0x1000000000000L);
      case 112:
         return jjMoveStringLiteralDfa11_0(active0, 0x400400L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x2000800000000L);
      case 115:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x210000000L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(9, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, active1, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x800000000L);
      case 97:
         return jjMoveStringLiteralDfa12_0(active0, 0x400400L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x1000000000000L);
      case 101:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x4000000000000L);
      case 105:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x2080210000000L);
      case 110:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(11, 35, 108);
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x200000000000L);
      case 111:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x8000000L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa12_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(10, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, active1, 0L);
      return 12;
   }
   switch(curChar)
   {
      case 98:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x2000210000000L);
      case 99:
         return jjMoveStringLiteralDfa13_0(active0, 0x400400L, active1, 0x200000000000L);
      case 101:
         if ((active1 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(12, 112, 108);
         break;
      case 110:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x4080000000000L);
      case 114:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x8000000L);
      case 115:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x800000000L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa13_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(11, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0, active1, 0L);
      return 13;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x8000000L);
      case 101:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(13, 10, 108);
         else if ((active1 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(13, 109, 108);
         return jjMoveStringLiteralDfa14_0(active0, 0x400000L, active1, 0x800000000L);
      case 108:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x210000000L);
      case 115:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x80000000000L);
      case 116:
         if ((active1 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(13, 114, 108);
         break;
      case 117:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x2000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(12, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa14_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(12, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0, active1, 0L);
      return 14;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0x210000000L);
      case 108:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0x800000000L);
      case 115:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(14, 22, 108);
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0x8000000L);
      case 116:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0x2080000000000L);
      default :
         break;
   }
   return jjStartNfa_0(13, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa15_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(13, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, 0L, active1, 0L);
      return 15;
   }
   switch(curChar)
   {
      case 101:
         if ((active1 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(15, 113, 108);
         return jjMoveStringLiteralDfa16_0(active1, 0x8000000L);
      case 102:
         if ((active1 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(15, 99, 108);
         break;
      case 110:
         return jjMoveStringLiteralDfa16_0(active1, 0x210000000L);
      case 114:
         return jjMoveStringLiteralDfa16_0(active1, 0x80000000000L);
      default :
         break;
   }
   return jjStartNfa_0(14, 0L, active1, 0L);
}
private int jjMoveStringLiteralDfa16_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(14, 0L, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, 0L, active1, 0L);
      return 16;
   }
   switch(curChar)
   {
      case 103:
         if ((active1 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(16, 92, 108);
         else if ((active1 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(16, 97, 108);
         break;
      case 108:
         return jjMoveStringLiteralDfa17_0(active1, 0x8000000L);
      case 117:
         return jjMoveStringLiteralDfa17_0(active1, 0x80000000000L);
      default :
         break;
   }
   return jjStartNfa_0(15, 0L, active1, 0L);
}
private int jjMoveStringLiteralDfa17_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(15, 0L, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, 0L, active1, 0L);
      return 17;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa18_0(active1, 0x80000000000L);
      case 102:
         if ((active1 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(17, 91, 108);
         break;
      default :
         break;
   }
   return jjStartNfa_0(16, 0L, active1, 0L);
}
private int jjMoveStringLiteralDfa18_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(16, 0L, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(17, 0L, active1, 0L);
      return 18;
   }
   switch(curChar)
   {
      case 116:
         return jjMoveStringLiteralDfa19_0(active1, 0x80000000000L);
      default :
         break;
   }
   return jjStartNfa_0(17, 0L, active1, 0L);
}
private int jjMoveStringLiteralDfa19_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(17, 0L, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(18, 0L, active1, 0L);
      return 19;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa20_0(active1, 0x80000000000L);
      default :
         break;
   }
   return jjStartNfa_0(18, 0L, active1, 0L);
}
private int jjMoveStringLiteralDfa20_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(18, 0L, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(19, 0L, active1, 0L);
      return 20;
   }
   switch(curChar)
   {
      case 111:
         return jjMoveStringLiteralDfa21_0(active1, 0x80000000000L);
      default :
         break;
   }
   return jjStartNfa_0(19, 0L, active1, 0L);
}
private int jjMoveStringLiteralDfa21_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(19, 0L, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(20, 0L, active1, 0L);
      return 21;
   }
   switch(curChar)
   {
      case 110:
         if ((active1 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(21, 107, 108);
         break;
      default :
         break;
   }
   return jjStartNfa_0(20, 0L, active1, 0L);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec43 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 107;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 107:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(20, 22);
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(94, 81);
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 117)
                        kind = 117;
                     jjCheckNAdd(93);
                  }
                  break;
               case 108:
                  if ((0x3ff600000000000L & l) != 0L)
                     jjCheckNAddTwoStates(104, 105);
                  else if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 106;
                  if ((0x3ff600000000000L & l) != 0L)
                  {
                     if (kind > 185)
                        kind = 185;
                     jjCheckNAdd(103);
                  }
                  else if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 102;
                  if ((0x3ff600000000000L & l) != 0L)
                     jjCheckNAddTwoStates(100, 101);
                  break;
               case 0:
                  if ((0xffffffff00002600L & l) != 0L)
                  {
                     if (kind > 195)
                        kind = 195;
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 116)
                        kind = 116;
                     jjCheckNAddStates(23, 32);
                  }
                  else if ((0x100002600L & l) != 0L)
                  {
                     if (kind > 120)
                        kind = 120;
                     jjCheckNAddTwoStates(97, 98);
                  }
                  else if (curChar == 46)
                     jjCheckNAddStates(33, 35);
                  else if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 69;
                  else if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 62;
                  else if (curChar == 39)
                     jjCheckNAddStates(36, 40);
                  else if (curChar == 34)
                     jjCheckNAddStates(41, 45);
                  if (curChar == 38)
                     jjAddStates(46, 49);
                  break;
               case 1:
                  if (curChar == 38)
                     jjAddStates(50, 53);
                  break;
               case 3:
                  if (curChar == 59)
                     jjCheckNAddStates(41, 45);
                  break;
               case 4:
                  if (curChar == 35)
                     jjCheckNAddTwoStates(5, 6);
                  break;
               case 5:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(5, 3);
                  break;
               case 7:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(7, 3);
                  break;
               case 8:
                  if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 9:
                  if (curChar == 34)
                     jjCheckNAddStates(41, 45);
                  break;
               case 10:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 11:
                  if ((0xffffffbbffffffffL & l) != 0L)
                     jjCheckNAddStates(41, 45);
                  break;
               case 12:
                  if (curChar == 34 && kind > 119)
                     kind = 119;
                  break;
               case 24:
               case 33:
                  if (curChar == 39)
                     jjCheckNAddStates(36, 40);
                  break;
               case 25:
                  if (curChar == 38)
                     jjAddStates(54, 57);
                  break;
               case 27:
                  if (curChar == 59)
                     jjCheckNAddStates(36, 40);
                  break;
               case 28:
                  if (curChar == 35)
                     jjCheckNAddTwoStates(29, 30);
                  break;
               case 29:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(29, 27);
                  break;
               case 31:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(31, 27);
                  break;
               case 32:
                  if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 34:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 35:
                  if ((0xffffff3fffffffffL & l) != 0L)
                     jjCheckNAddStates(36, 40);
                  break;
               case 36:
                  if (curChar == 39 && kind > 119)
                     kind = 119;
                  break;
               case 48:
                  if (curChar == 38)
                     jjAddStates(46, 49);
                  break;
               case 50:
                  if (curChar == 59 && kind > 133)
                     kind = 133;
                  break;
               case 62:
                  if (curChar == 35)
                     jjCheckNAddTwoStates(63, 65);
                  break;
               case 63:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(63, 64);
                  break;
               case 64:
                  if (curChar == 59 && kind > 184)
                     kind = 184;
                  break;
               case 66:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(66, 64);
                  break;
               case 67:
                  if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 62;
                  break;
               case 68:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 69;
                  break;
               case 69:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 70;
                  break;
               case 71:
                  if ((0x3ff600000000000L & l) == 0L)
                     break;
                  if (kind > 191)
                     kind = 191;
                  jjstateSet[jjnewStateCnt++] = 71;
                  break;
               case 72:
                  if ((0xffffffff00002600L & l) != 0L && kind > 195)
                     kind = 195;
                  break;
               case 73:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 116)
                     kind = 116;
                  jjCheckNAddStates(23, 32);
                  break;
               case 74:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 116)
                     kind = 116;
                  jjCheckNAdd(74);
                  break;
               case 75:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(75, 76);
                  break;
               case 76:
                  if (curChar != 46)
                     break;
                  if (kind > 117)
                     kind = 117;
                  jjCheckNAdd(77);
                  break;
               case 77:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 117)
                     kind = 117;
                  jjCheckNAdd(77);
                  break;
               case 78:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(58, 60);
                  break;
               case 79:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(80, 81);
                  break;
               case 80:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(80, 81);
                  break;
               case 82:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(83);
                  break;
               case 83:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 118)
                     kind = 118;
                  jjCheckNAdd(83);
                  break;
               case 84:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(61, 64);
                  break;
               case 85:
                  if (curChar == 46)
                     jjCheckNAddStates(65, 67);
                  break;
               case 86:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(65, 67);
                  break;
               case 88:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(89);
                  break;
               case 89:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(89, 90);
                  break;
               case 91:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 205)
                     kind = 205;
                  jjstateSet[jjnewStateCnt++] = 91;
                  break;
               case 92:
                  if (curChar == 46)
                     jjCheckNAddStates(33, 35);
                  break;
               case 93:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 117)
                     kind = 117;
                  jjCheckNAdd(93);
                  break;
               case 94:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(94, 81);
                  break;
               case 95:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(20, 22);
                  break;
               case 96:
                  if ((0x100002600L & l) == 0L)
                     break;
                  if (kind > 120)
                     kind = 120;
                  jjCheckNAddTwoStates(97, 98);
                  break;
               case 97:
                  if ((0x100002600L & l) == 0L)
                     break;
                  if (kind > 120)
                     kind = 120;
                  jjCheckNAdd(97);
                  break;
               case 98:
                  if ((0x100002600L & l) == 0L)
                     break;
                  if (kind > 192)
                     kind = 192;
                  jjCheckNAdd(98);
                  break;
               case 100:
                  if ((0x3ff600000000000L & l) != 0L)
                     jjCheckNAddTwoStates(100, 101);
                  break;
               case 101:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 102;
                  break;
               case 103:
                  if ((0x3ff600000000000L & l) == 0L)
                     break;
                  if (kind > 185)
                     kind = 185;
                  jjCheckNAdd(103);
                  break;
               case 104:
                  if ((0x3ff600000000000L & l) != 0L)
                     jjCheckNAddTwoStates(104, 105);
                  break;
               case 105:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 106;
                  break;
               case 106:
                  if (curChar == 42 && kind > 190)
                     kind = 190;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 108:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(104, 105);
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 185)
                        kind = 185;
                     jjCheckNAdd(103);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(100, 101);
                  break;
               case 0:
                  if (kind > 195)
                     kind = 195;
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 185)
                        kind = 185;
                     jjCheckNAddStates(68, 72);
                  }
                  break;
               case 2:
                  if (curChar == 116)
                     jjCheckNAdd(3);
                  break;
               case 6:
                  if (curChar == 120)
                     jjCheckNAdd(7);
                  break;
               case 7:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddTwoStates(7, 3);
                  break;
               case 11:
                  jjAddStates(41, 45);
                  break;
               case 13:
                  if (curChar == 108)
                     jjCheckNAdd(2);
                  break;
               case 14:
                  if (curChar == 103)
                     jjCheckNAdd(2);
                  break;
               case 15:
                  if (curChar == 111)
                     jjCheckNAdd(2);
                  break;
               case 16:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 17:
                  if (curChar == 113)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 18:
                  if (curChar == 97)
                     jjAddStates(73, 74);
                  break;
               case 19:
                  if (curChar == 112)
                     jjCheckNAdd(3);
                  break;
               case 20:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 21:
                  if (curChar == 115)
                     jjCheckNAdd(3);
                  break;
               case 22:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 23:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 26:
                  if (curChar == 116)
                     jjCheckNAdd(27);
                  break;
               case 30:
                  if (curChar == 120)
                     jjCheckNAdd(31);
                  break;
               case 31:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddTwoStates(31, 27);
                  break;
               case 35:
                  jjAddStates(36, 40);
                  break;
               case 37:
                  if (curChar == 108)
                     jjCheckNAdd(26);
                  break;
               case 38:
                  if (curChar == 103)
                     jjCheckNAdd(26);
                  break;
               case 39:
                  if (curChar == 111)
                     jjCheckNAdd(26);
                  break;
               case 40:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 41:
                  if (curChar == 113)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 42:
                  if (curChar == 97)
                     jjAddStates(75, 76);
                  break;
               case 43:
                  if (curChar == 112)
                     jjCheckNAdd(27);
                  break;
               case 44:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 45:
                  if (curChar == 115)
                     jjCheckNAdd(27);
                  break;
               case 46:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 45;
                  break;
               case 47:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 49:
                  if (curChar == 116)
                     jjCheckNAdd(50);
                  break;
               case 51:
                  if (curChar == 108)
                     jjCheckNAdd(49);
                  break;
               case 52:
                  if (curChar == 103)
                     jjCheckNAdd(49);
                  break;
               case 53:
                  if (curChar == 111)
                     jjCheckNAdd(49);
                  break;
               case 54:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 53;
                  break;
               case 55:
                  if (curChar == 113)
                     jjstateSet[jjnewStateCnt++] = 54;
                  break;
               case 56:
                  if (curChar == 97)
                     jjAddStates(77, 78);
                  break;
               case 57:
                  if (curChar == 112)
                     jjCheckNAdd(50);
                  break;
               case 58:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 57;
                  break;
               case 59:
                  if (curChar == 115)
                     jjCheckNAdd(50);
                  break;
               case 60:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 59;
                  break;
               case 61:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 60;
                  break;
               case 65:
                  if (curChar == 120)
                     jjCheckNAdd(66);
                  break;
               case 66:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddTwoStates(66, 64);
                  break;
               case 70:
               case 71:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 191)
                     kind = 191;
                  jjCheckNAdd(71);
                  break;
               case 72:
                  if (kind > 195)
                     kind = 195;
                  break;
               case 81:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(79, 80);
                  break;
               case 87:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(81, 82);
                  break;
               case 90:
               case 91:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 205)
                     kind = 205;
                  jjCheckNAdd(91);
                  break;
               case 99:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 185)
                     kind = 185;
                  jjCheckNAddStates(68, 72);
                  break;
               case 100:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(100, 101);
                  break;
               case 102:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 185)
                     kind = 185;
                  jjCheckNAdd(103);
                  break;
               case 103:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 185)
                     kind = 185;
                  jjCheckNAdd(103);
                  break;
               case 104:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(104, 105);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 108:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(100, 101);
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 185)
                        kind = 185;
                     jjCheckNAdd(103);
                  }
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(104, 105);
                  break;
               case 0:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 195)
                        kind = 195;
                  }
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 185)
                        kind = 185;
                     jjCheckNAddStates(68, 72);
                  }
                  break;
               case 11:
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                     jjAddStates(41, 45);
                  break;
               case 35:
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                     jjAddStates(36, 40);
                  break;
               case 70:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 191)
                     kind = 191;
                  jjCheckNAdd(71);
                  break;
               case 71:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 191)
                     kind = 191;
                  jjCheckNAdd(71);
                  break;
               case 72:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2) && kind > 195)
                     kind = 195;
                  break;
               case 99:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 185)
                     kind = 185;
                  jjCheckNAddStates(68, 72);
                  break;
               case 100:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(100, 101);
                  break;
               case 102:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 185)
                     kind = 185;
                  jjCheckNAdd(103);
                  break;
               case 103:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 185)
                     kind = 185;
                  jjCheckNAdd(103);
                  break;
               case 104:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(104, 105);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 107 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_23(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      case 0:
         if ((active2 & 0x8000L) != 0L)
            return 3;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_23(int pos, long active0, long active1, long active2)
{
   return jjMoveNfa_23(jjStopStringLiteralDfa_23(pos, active0, active1, active2), pos + 1);
}
private int jjMoveStringLiteralDfa0_23()
{
   switch(curChar)
   {
      case 38:
         return jjStartNfaWithStates_23(0, 143, 3);
      case 39:
         jjmatchedKind = 151;
         return jjMoveStringLiteralDfa1_23(0x80L);
      case 60:
         return jjStopAtPos(0, 146);
      case 123:
         jjmatchedKind = 137;
         return jjMoveStringLiteralDfa1_23(0x2000L);
      case 125:
         jjmatchedKind = 140;
         return jjMoveStringLiteralDfa1_23(0x4000L);
      default :
         return jjMoveNfa_23(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_23(long active2)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_23(0, 0L, 0L, active2);
      return 1;
   }
   switch(curChar)
   {
      case 39:
         if ((active2 & 0x80L) != 0L)
            return jjStopAtPos(1, 135);
         break;
      case 123:
         if ((active2 & 0x2000L) != 0L)
            return jjStopAtPos(1, 141);
         break;
      case 125:
         if ((active2 & 0x4000L) != 0L)
            return jjStopAtPos(1, 142);
         break;
      default :
         break;
   }
   return jjStartNfa_23(0, 0L, 0L, active2);
}
private int jjStartNfaWithStates_23(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_23(state, pos + 1);
}
private int jjMoveNfa_23(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 21;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if (curChar == 35)
                     jjCheckNAddTwoStates(16, 18);
                  break;
               case 0:
                  if ((0xffffffff00002600L & l) != 0L)
                  {
                     if (kind > 155)
                        kind = 155;
                  }
                  if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 15;
                  if (curChar == 38)
                     jjAddStates(14, 17);
                  break;
               case 2:
                  if (curChar == 59 && kind > 133)
                     kind = 133;
                  break;
               case 14:
                  if ((0xffffffff00002600L & l) != 0L && kind > 155)
                     kind = 155;
                  break;
               case 16:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(16, 17);
                  break;
               case 17:
                  if (curChar == 59 && kind > 184)
                     kind = 184;
                  break;
               case 19:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(19, 17);
                  break;
               case 20:
                  if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if (curChar == 97)
                     jjAddStates(18, 19);
                  else if (curChar == 113)
                     jjstateSet[jjnewStateCnt++] = 6;
                  else if (curChar == 103)
                     jjCheckNAdd(1);
                  else if (curChar == 108)
                     jjCheckNAdd(1);
                  break;
               case 0:
                  if (kind > 155)
                     kind = 155;
                  break;
               case 1:
                  if (curChar == 116)
                     jjCheckNAdd(2);
                  break;
               case 4:
                  if (curChar == 103)
                     jjCheckNAdd(1);
                  break;
               case 5:
                  if (curChar == 111)
                     jjCheckNAdd(1);
                  break;
               case 6:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 7:
                  if (curChar == 113)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 8:
                  if (curChar == 97)
                     jjAddStates(18, 19);
                  break;
               case 9:
                  if (curChar == 112)
                     jjCheckNAdd(2);
                  break;
               case 10:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 11:
                  if (curChar == 115)
                     jjCheckNAdd(2);
                  break;
               case 12:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 13:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 18:
                  if (curChar == 120)
                     jjCheckNAdd(19);
                  break;
               case 19:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddTwoStates(19, 17);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2) && kind > 155)
                     kind = 155;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 21 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_15()
{
   return jjMoveNfa_15(0, 0);
}
private int jjMoveNfa_15(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 1;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x100002600L & l) == 0L)
                     break;
                  kind = 120;
                  jjstateSet[jjnewStateCnt++] = 0;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 1 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_22(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      case 0:
         if ((active2 & 0x8000L) != 0L)
            return 3;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_22(int pos, long active0, long active1, long active2)
{
   return jjMoveNfa_22(jjStopStringLiteralDfa_22(pos, active0, active1, active2), pos + 1);
}
private int jjMoveStringLiteralDfa0_22()
{
   switch(curChar)
   {
      case 34:
         jjmatchedKind = 149;
         return jjMoveStringLiteralDfa1_22(0x40L);
      case 38:
         return jjStartNfaWithStates_22(0, 143, 3);
      case 60:
         return jjStopAtPos(0, 146);
      case 123:
         jjmatchedKind = 137;
         return jjMoveStringLiteralDfa1_22(0x2000L);
      case 125:
         jjmatchedKind = 140;
         return jjMoveStringLiteralDfa1_22(0x4000L);
      default :
         return jjMoveNfa_22(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_22(long active2)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_22(0, 0L, 0L, active2);
      return 1;
   }
   switch(curChar)
   {
      case 34:
         if ((active2 & 0x40L) != 0L)
            return jjStopAtPos(1, 134);
         break;
      case 123:
         if ((active2 & 0x2000L) != 0L)
            return jjStopAtPos(1, 141);
         break;
      case 125:
         if ((active2 & 0x4000L) != 0L)
            return jjStopAtPos(1, 142);
         break;
      default :
         break;
   }
   return jjStartNfa_22(0, 0L, 0L, active2);
}
private int jjStartNfaWithStates_22(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_22(state, pos + 1);
}
private int jjMoveNfa_22(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 21;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if (curChar == 35)
                     jjCheckNAddTwoStates(16, 18);
                  break;
               case 0:
                  if ((0xffffffff00002600L & l) != 0L)
                  {
                     if (kind > 154)
                        kind = 154;
                  }
                  if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 15;
                  if (curChar == 38)
                     jjAddStates(14, 17);
                  break;
               case 2:
                  if (curChar == 59 && kind > 133)
                     kind = 133;
                  break;
               case 14:
                  if ((0xffffffff00002600L & l) != 0L && kind > 154)
                     kind = 154;
                  break;
               case 16:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(16, 17);
                  break;
               case 17:
                  if (curChar == 59 && kind > 184)
                     kind = 184;
                  break;
               case 19:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(19, 17);
                  break;
               case 20:
                  if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if (curChar == 97)
                     jjAddStates(18, 19);
                  else if (curChar == 113)
                     jjstateSet[jjnewStateCnt++] = 6;
                  else if (curChar == 103)
                     jjCheckNAdd(1);
                  else if (curChar == 108)
                     jjCheckNAdd(1);
                  break;
               case 0:
                  if (kind > 154)
                     kind = 154;
                  break;
               case 1:
                  if (curChar == 116)
                     jjCheckNAdd(2);
                  break;
               case 4:
                  if (curChar == 103)
                     jjCheckNAdd(1);
                  break;
               case 5:
                  if (curChar == 111)
                     jjCheckNAdd(1);
                  break;
               case 6:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 7:
                  if (curChar == 113)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 8:
                  if (curChar == 97)
                     jjAddStates(18, 19);
                  break;
               case 9:
                  if (curChar == 112)
                     jjCheckNAdd(2);
                  break;
               case 10:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 11:
                  if (curChar == 115)
                     jjCheckNAdd(2);
                  break;
               case 12:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 13:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 18:
                  if (curChar == 120)
                     jjCheckNAdd(19);
                  break;
               case 19:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddTwoStates(19, 17);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2) && kind > 154)
                     kind = 154;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 21 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_20()
{
   return jjMoveNfa_20(0, 0);
}
private int jjMoveNfa_20(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 1;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x100002600L & l) == 0L)
                     break;
                  kind = 120;
                  jjstateSet[jjnewStateCnt++] = 0;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 1 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_16()
{
   return jjMoveNfa_16(0, 0);
}
private int jjMoveNfa_16(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 1;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x100002600L & l) == 0L)
                     break;
                  kind = 120;
                  jjstateSet[jjnewStateCnt++] = 0;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 1 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_3()
{
   return jjMoveNfa_3(0, 0);
}
private int jjMoveNfa_3(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 1;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x100002600L & l) == 0L)
                     break;
                  kind = 120;
                  jjstateSet[jjnewStateCnt++] = 0;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 1 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   12, 13, 14, 15, 5, 6, 8, 9, 10, 2, 3, 2, 3, 5, 3, 4, 
   7, 8, 10, 13, 95, 87, 90, 74, 75, 76, 78, 79, 81, 84, 85, 87, 
   90, 93, 94, 95, 25, 32, 34, 35, 36, 1, 8, 10, 11, 12, 51, 52, 
   55, 56, 13, 14, 17, 18, 37, 38, 41, 42, 78, 79, 81, 84, 85, 87, 
   90, 86, 87, 90, 100, 101, 103, 104, 105, 20, 23, 44, 47, 58, 61, 82, 
   83, 88, 89, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      case 1:
         return ((jjbitVec3[i2] & l2) != 0L);
      case 2:
         return ((jjbitVec4[i2] & l2) != 0L);
      case 3:
         return ((jjbitVec5[i2] & l2) != 0L);
      case 4:
         return ((jjbitVec6[i2] & l2) != 0L);
      case 5:
         return ((jjbitVec7[i2] & l2) != 0L);
      case 6:
         return ((jjbitVec8[i2] & l2) != 0L);
      case 9:
         return ((jjbitVec9[i2] & l2) != 0L);
      case 10:
         return ((jjbitVec10[i2] & l2) != 0L);
      case 11:
         return ((jjbitVec11[i2] & l2) != 0L);
      case 12:
         return ((jjbitVec12[i2] & l2) != 0L);
      case 13:
         return ((jjbitVec13[i2] & l2) != 0L);
      case 14:
         return ((jjbitVec14[i2] & l2) != 0L);
      case 15:
         return ((jjbitVec15[i2] & l2) != 0L);
      case 16:
         return ((jjbitVec16[i2] & l2) != 0L);
      case 17:
         return ((jjbitVec17[i2] & l2) != 0L);
      case 30:
         return ((jjbitVec18[i2] & l2) != 0L);
      case 31:
         return ((jjbitVec19[i2] & l2) != 0L);
      case 33:
         return ((jjbitVec20[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec21[i2] & l2) != 0L);
      case 49:
         return ((jjbitVec22[i2] & l2) != 0L);
      case 159:
         return ((jjbitVec23[i2] & l2) != 0L);
      case 215:
         return ((jjbitVec24[i2] & l2) != 0L);
      default :
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec25[i2] & l2) != 0L);
      case 1:
         return ((jjbitVec3[i2] & l2) != 0L);
      case 2:
         return ((jjbitVec26[i2] & l2) != 0L);
      case 3:
         return ((jjbitVec27[i2] & l2) != 0L);
      case 4:
         return ((jjbitVec28[i2] & l2) != 0L);
      case 5:
         return ((jjbitVec29[i2] & l2) != 0L);
      case 6:
         return ((jjbitVec30[i2] & l2) != 0L);
      case 9:
         return ((jjbitVec31[i2] & l2) != 0L);
      case 10:
         return ((jjbitVec32[i2] & l2) != 0L);
      case 11:
         return ((jjbitVec33[i2] & l2) != 0L);
      case 12:
         return ((jjbitVec34[i2] & l2) != 0L);
      case 13:
         return ((jjbitVec35[i2] & l2) != 0L);
      case 14:
         return ((jjbitVec36[i2] & l2) != 0L);
      case 15:
         return ((jjbitVec37[i2] & l2) != 0L);
      case 16:
         return ((jjbitVec16[i2] & l2) != 0L);
      case 17:
         return ((jjbitVec17[i2] & l2) != 0L);
      case 30:
         return ((jjbitVec18[i2] & l2) != 0L);
      case 31:
         return ((jjbitVec19[i2] & l2) != 0L);
      case 32:
         return ((jjbitVec38[i2] & l2) != 0L);
      case 33:
         return ((jjbitVec20[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec39[i2] & l2) != 0L);
      case 49:
         return ((jjbitVec22[i2] & l2) != 0L);
      case 159:
         return ((jjbitVec23[i2] & l2) != 0L);
      case 215:
         return ((jjbitVec24[i2] & l2) != 0L);
      default :
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_2(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec41[i2] & l2) != 0L);
      case 255:
         return ((jjbitVec42[i2] & l2) != 0L);
      default :
         if ((jjbitVec40[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_3(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec41[i2] & l2) != 0L);
      default :
         if ((jjbitVec43[i1] & l1) != 0L)
            return true;
         return false;
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", "\45\45\45", "\170\161\165\145\162\171", "\166\145\162\163\151\157\156", 
"\145\156\143\157\144\151\156\147", "\155\157\144\165\154\145", "\156\141\155\145\163\160\141\143\145", "\75", 
"\73", "\144\145\143\154\141\162\145", 
"\142\157\165\156\144\141\162\171\55\163\160\141\143\145", "\160\162\145\163\145\162\166\145", "\163\164\162\151\160", 
"\144\145\146\141\165\154\164", "\145\154\145\155\145\156\164", "\146\165\156\143\164\151\157\156", 
"\157\160\164\151\157\156", "\157\162\144\145\162\151\156\147", "\157\162\144\145\162\145\144", 
"\165\156\157\162\144\145\162\145\144", "\157\162\144\145\162", "\145\155\160\164\171", 
"\143\157\160\171\55\156\141\155\145\163\160\141\143\145\163", "\54", "\156\157\55\160\162\145\163\145\162\166\145", 
"\151\156\150\145\162\151\164", "\156\157\55\151\156\150\145\162\151\164", 
"\143\157\154\154\141\164\151\157\156", "\142\141\163\145\55\165\162\151", "\151\155\160\157\162\164", 
"\163\143\150\145\155\141", "\141\164", "\166\141\162\151\141\142\154\145", "\44", "\72\75", 
"\143\157\156\163\164\162\165\143\164\151\157\156", "\50", "\51", "\141\163", "\162\145\164\165\162\156", "\146\157\162", 
"\151\156", "\154\145\164", "\167\150\145\162\145", "\142\171", 
"\163\164\141\142\154\145", "\163\157\155\145", "\145\166\145\162\171", 
"\163\141\164\151\163\146\151\145\163", "\164\171\160\145\163\167\151\164\143\150", "\143\141\163\145", "\151\146", 
"\164\150\145\156", "\145\154\163\145", "\157\162", "\141\156\144", "\164\157", "\52", 
"\144\151\166", "\151\144\151\166", "\155\157\144", "\165\156\151\157\156", "\174", 
"\151\156\164\145\162\163\145\143\164", "\145\170\143\145\160\164", "\151\156\163\164\141\156\143\145", "\157\146", 
"\164\162\145\141\164", "\143\141\163\164\141\142\154\145", "\143\141\163\164", "\41\75", "\74\75", 
"\76", "\76\75", "\145\161", "\156\145", "\154\164", "\154\145", "\147\164", 
"\147\145", "\151\163", "\74\74", "\76\76", "\166\141\154\151\144\141\164\145", 
"\154\141\170", "\163\164\162\151\143\164", "\143\150\151\154\144", "\72\72", 
"\144\145\163\143\145\156\144\141\156\164", "\141\164\164\162\151\142\165\164\145", "\163\145\154\146", 
"\144\145\163\143\145\156\144\141\156\164\55\157\162\55\163\145\154\146", "\146\157\154\154\157\167\151\156\147\55\163\151\142\154\151\156\147", 
"\146\157\154\154\157\167\151\156\147", "\100", "\160\141\162\145\156\164", "\141\156\143\145\163\164\157\162", 
"\160\162\145\143\145\144\151\156\147\55\163\151\142\154\151\156\147", "\160\162\145\143\145\144\151\156\147", 
"\141\156\143\145\163\164\157\162\55\157\162\55\163\145\154\146", "\56\56", "\133", "\135", "\56", "\144\157\143\165\155\145\156\164", 
"\164\145\170\164", "\143\157\155\155\145\156\164", 
"\160\162\157\143\145\163\163\151\156\147\55\151\156\163\164\162\165\143\164\151\157\156", "\77", "\145\155\160\164\171\55\163\145\161\165\145\156\143\145", 
"\151\164\145\155", "\156\157\144\145", "\144\157\143\165\155\145\156\164\55\156\157\144\145", 
"\163\143\150\145\155\141\55\141\164\164\162\151\142\165\164\145", "\163\143\150\145\155\141\55\145\154\145\155\145\156\164", "\164\171\160\145", 
null, null, null, null, null, null, "\55", "\53", 
"\145\170\164\145\162\156\141\154", "\141\163\143\145\156\144\151\156\147", 
"\144\145\163\143\145\156\144\151\156\147", "\147\162\145\141\164\145\163\164", "\154\145\141\163\164", null, null, null, 
null, null, "\42\42", "\47\47", null, "\173", "\173", "\175", "\175", "\173\173", 
"\175\175", "\46", "\74", "\74", "\74", "\76", "\42", "\42", "\47", "\47", null, null, 
null, null, null, "\57\76", "\74\57", "\76", "\75", "\50\43", "\43\51", null, null, 
"\74\77", "\74\77", "\77\76", null, null, "\74\41\133\103\104\101\124\101\133", 
"\74\41\133\103\104\101\124\101\133", null, "\74\41\55\55", "\74\41\55\55", "\55\55\76", null, null, null, null, 
"\57", "\57\57", null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "FTPOSFILTER",
   "FTMATCHOPTION",
   "PROLOG_SPECIAL",
   "PROLOG_NCNAME",
   "DECLAREORDERING",
   "PROLOG",
   "OPERAND",
   "OPERATOR",
   "KINDTEST",
   "NAMESPACEDECL",
   "SINGLETYPE",
   "ITEMTYPE",
   "NAMESPACEKEYWORD",
   "VARNAME",
   "OCCURRENCEINDICATOR",
   "CLOSEKINDTEST",
   "XQUERYVERSION",
   "PRAGMA",
   "OPTION",
   "URITOOPERATOR",
   "ELEMENT_CONTENT",
   "QUOT_ATTRIBUTE_CONTENT",
   "APOS_ATTRIBUTE_CONTENT",
   "START_TAG",
   "PRAGMACONTENTS",
   "XML_COMMENT",
   "END_TAG",
   "PRAGMACONTENTSSPACEDIVIDER",
   "PROCESSING_INSTRUCTION",
   "PROCESSING_INSTRUCTION_CONTENT",
   "CDATA_SECTION",
   "EXPR_COMMENT",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, 0, -1, -1, -1, 24, 24, 0, 21, 22, 24, 
   23, 24, -1, -1, -1, -1, -1, -1, 27, -1, -1, 18, 0, -1, -1, 29, 29, -1, -1, -1, 31, 31, -1, 26, 26, 
   -1, -1, 32, -1, -1, -1, -1, -1, -1, -1, -1, 28, -1, -1, -1, -1, -1, -1, 25, 30, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xffffffffffffffffL, 0xfcffffffffffffffL, 0xdff0fffffffffee1L, 0x200fL, 
};
static final long[] jjtoSkip = {
   0x0L, 0x100000000000000L, 0xe000000000000L, 0x0L, 
};
static final long[] jjtoSpecial = {
   0x0L, 0x0L, 0xe000000000000L, 0x0L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[107];
private final int[] jjstateSet = new int[214];
private final StringBuilder jjimage = new StringBuilder();
private StringBuilder image = jjimage;
private int jjimageLen;
private int lengthOfMatch;
protected char curChar;
/** Constructor. */
public XPathTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public XPathTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 107; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 33 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   switch(curLexState)
   {
     case 0:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_0();
       break;
     case 1:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_1();
       break;
     case 2:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_2();
       break;
     case 3:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_3();
       break;
     case 4:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_4();
       break;
     case 5:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_5();
       break;
     case 6:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_6();
       break;
     case 7:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_7();
       break;
     case 8:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_8();
       break;
     case 9:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_9();
       break;
     case 10:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_10();
       break;
     case 11:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_11();
       break;
     case 12:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_12();
       break;
     case 13:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_13();
       break;
     case 14:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_14();
       break;
     case 15:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_15();
       break;
     case 16:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_16();
       break;
     case 17:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_17();
       break;
     case 18:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_18();
       break;
     case 19:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_19();
       break;
     case 20:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_20();
       break;
     case 21:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_21();
       break;
     case 22:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_22();
       break;
     case 23:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_23();
       break;
     case 24:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_24();
       break;
     case 25:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_25();
       break;
     case 26:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_26();
       break;
     case 27:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_27();
       break;
     case 28:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_28();
       break;
     case 29:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_29();
       break;
     case 30:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_30();
       break;
     case 31:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_31();
       break;
     case 32:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_32();
       break;
   }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           matchedToken.specialToken = specialToken;
           TokenLexicalActions(matchedToken);
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else
        {
           if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
           {
              matchedToken = jjFillToken();
              if (specialToken == null)
                 specialToken = matchedToken;
              else
              {
                 matchedToken.specialToken = specialToken;
                 specialToken = (specialToken.next = matchedToken);
              }
              SkipLexicalActions(matchedToken);
           }
           else
              SkipLexicalActions(null);
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 177 :
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                           pushState();
         break;
      case 179 :
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                         popState();
         break;
      default :
         break;
   }
}
void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 137 :
        image.append(jjstrLiteralImages[137]);
        lengthOfMatch = jjstrLiteralImages[137].length();
                    pushState();
         break;
      case 138 :
        image.append(jjstrLiteralImages[138]);
        lengthOfMatch = jjstrLiteralImages[138].length();
                                 pushState(DEFAULT);
         break;
      case 139 :
        image.append(jjstrLiteralImages[139]);
        lengthOfMatch = jjstrLiteralImages[139].length();
                    popState();
         break;
      case 140 :
        image.append(jjstrLiteralImages[140]);
        lengthOfMatch = jjstrLiteralImages[140].length();
                                  pushState();
         break;
      case 144 :
        image.append(jjstrLiteralImages[144]);
        lengthOfMatch = jjstrLiteralImages[144].length();
                              pushState(DEFAULT);
         break;
      case 145 :
        image.append(jjstrLiteralImages[145]);
        lengthOfMatch = jjstrLiteralImages[145].length();
                          pushState();
         break;
      case 146 :
        image.append(jjstrLiteralImages[146]);
        lengthOfMatch = jjstrLiteralImages[146].length();
                             pushState();
         break;
      case 157 :
        image.append(jjstrLiteralImages[157]);
        lengthOfMatch = jjstrLiteralImages[157].length();
                            popState();
         break;
      case 159 :
        image.append(jjstrLiteralImages[159]);
        lengthOfMatch = jjstrLiteralImages[159].length();
                         popState();
         break;
      case 165 :
        image.append(jjstrLiteralImages[165]);
        lengthOfMatch = jjstrLiteralImages[165].length();
                                         pushState(DEFAULT);
         break;
      case 166 :
        image.append(jjstrLiteralImages[166]);
        lengthOfMatch = jjstrLiteralImages[166].length();
                                                          pushState();
         break;
      case 167 :
        image.append(jjstrLiteralImages[167]);
        lengthOfMatch = jjstrLiteralImages[167].length();
                                       popState();
         break;
      case 170 :
        image.append(jjstrLiteralImages[170]);
        lengthOfMatch = jjstrLiteralImages[170].length();
                                       pushState(DEFAULT);
         break;
      case 171 :
        image.append(jjstrLiteralImages[171]);
        lengthOfMatch = jjstrLiteralImages[171].length();
                                                        pushState();
         break;
      case 172 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                       popState();
         break;
      case 173 :
        image.append(jjstrLiteralImages[173]);
        lengthOfMatch = jjstrLiteralImages[173].length();
                                pushState(DEFAULT);
         break;
      case 174 :
        image.append(jjstrLiteralImages[174]);
        lengthOfMatch = jjstrLiteralImages[174].length();
                                                 pushState();
         break;
      case 175 :
        image.append(jjstrLiteralImages[175]);
        lengthOfMatch = jjstrLiteralImages[175].length();
                             popState();
         break;
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
